{"version":3,"sources":["utils/api.js","utils/auth.js","utils/mutations.js","utils/queries.js","pages/SearchYelp.js","utils/localStorage.js","pages/Login.js","pages/Signup.js","pages/Profile.js","paw2.png","components/Navbar.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["require","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","LOGIN_USER","gql","ADD_USER","ADD_BUSINESS","REMOVE_BUSINESS","QUERY_ME","SearchBusinesses","useState","searchedBiz","setSearchedBiz","searchInput","setSearchInput","useQuery","data","loading","user","me","console","log","businesses","JSON","parse","savedBizIds","setSavedBizIds","useMutation","addBusiness","error","useEffect","bizIdArray","length","stringify","handleFormSubmit","event","preventDefault","query","fetch","method","headers","authorization","response","ok","Error","json","bizArray","map","biz","name","id","image","image_url","rating","street","address1","city","zip","zip_code","url","handleSaveBiz","bizId","bizToSave","find","Auth","loggedIn","variables","yelpId","imgUrl","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","savedBizId","onClick","Login","props","email","password","formState","setFormState","login","handleChange","to","style","cursor","message","Signup","username","addUser","Profile","removeBusiness","handleDeleteBusiness","businessId","business","width","href","rel","_id","AppNavbar","Navbar","bg","expand","Brand","as","Link","logo","height","Toggle","Collapse","Nav","getProfile","logout","httpLink","createHttpLink","uri","authLink","setContext","_","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","SearchYelp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2aa7df48.chunk.js","sourcesContent":["const yelp = require('yelp-fusion');\nconst CORS = \"https://cors-anywhere.herokuapp.com/\"\n// const apiKey = process.env.REACT_APP_API_KEY\n// 'Bearer sFDrQ2pCQos8PDSDDwhIcVDKCUPVRHBWQf8OUcjX3PKW-d6e0S_uxIlVXXbHGFf96nF8w-VqDPw_2ZzSU-5-ievJLv_YlGpOQkamfNYe3l5k3b0BnlP2gTXQ5ZyLYnYx';\n// console.log(apiKey);\n        // process.env.REACT_APP_API_KEY,\n\n        \n// Yelp needed cors-anywhere until deployed. Can update after deployment\nexport const searchYelpApi = (query) => {\n  console.log('hitAPI')\n    return fetch(`${CORS}https://api.yelp.com/v3/businesses/search?term=dogs_allowed&location=${query}`, {\n      method: 'GET',\n      headers: {\n        authorization: 'Bearer sFDrQ2pCQos8PDSDDwhIcVDKCUPVRHBWQf8OUcjX3PKW-d6e0S_uxIlVXXbHGFf96nF8w-VqDPw_2ZzSU-5-ievJLv_YlGpOQkamfNYe3l5k3b0BnlP2gTXQ5ZyLYnYx'\n\n      }\n    });\n  };","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_BUSINESS = gql`\n  mutation addBusiness($name: String!, $yelpId: String!, $url: String!, $location: String!, $imgUrl: String) {\n    addBusiness(name: $name, yelpId: $yelpId, url: $url, location: $location, imgUrl: $imgUrl) {\n      _id\n      name\n      yelpId\n      url\n      location\n      imgUrl\n      comments {\n        _id\n        commentText\n      }\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\nmutation addComment($businessId: ID!, $commentText: String!) {\n  addComment(businessId: $businessId, commentText: $commentText) {\n    _id\n    name\n    yelpId\n    url\n    location\n    comments {\n      _id\n      commentText\n    }\n  }\n}`;\n\nexport const REMOVE_BUSINESS = gql`\nmutation removeBusiness($businessId: ID!) {\n  removeBusiness(businessId: $businessId) {\n    _id\n    name\n    yelpId\n    url\n    location\n    imgUrl\n    comments {\n      _id\n      commentText\n    }\n  }\n}\n`;\n\nexport const REMOVE_COMMENT = gql`\nmutation removeComment($businessId: ID!, $commentId: ID!) {\n  removeComment(businessId: $businessId, commentId: $commentId) {\n    _id\n    name\n    yelpId\n    url\n    location\n    comments {\n      _id\n      commentAuthor\n    }\n  }\n}`;\n\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      businesses {\n        _id\n        name\n        location\n        imgUrl\n        yelpId\n        url\n      }\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      business {\n        _id\n        name\n      }\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_BUSINESSES = gql`\n  query Businesses {\n    businesses {\n      _id\n      name\n      location\n      url\n    }\n  }\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n  Jumbotron,\n} from \"react-bootstrap\";\nimport { searchMain, searchYelpApi } from \"../utils/api\";\nimport Auth from \"../utils/auth\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { ADD_BUSINESS } from \"../utils/mutations\";\nimport { getSavedBizIds, saveBizIds } from \"../utils/localStorage\";\nimport { QUERY_ME } from \"../utils/queries\";\n\nconst SearchBusinesses = () => {\n  // create state for holding returned yelp api data\n  const [searchedBiz, setSearchedBiz] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const { loading, data } = useQuery(QUERY_ME);\n  const user = data?.me || {};\n  console.log(user.businesses);\n\n  //  state to hold businessId values\n\n  const [savedBizIds, setSavedBizIds] = useState(getSavedBizIds());\n  const [addBusiness, { error }] = useMutation(ADD_BUSINESS);\n\n  useEffect(() => {\n    return () => saveBizIds(savedBizIds);\n  });\n\n  //function to handle the client's business search input\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"here\");\n    if (!searchInput) {\n      return false;\n    }\n    try {\n      const response = await searchYelpApi(searchInput);\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(\"Could not complete search request\");\n      }\n      //map over the yelp results and get endpoints we want\n      const data = await response.json();\n      console.log(data);\n      const bizArray = data?.businesses.map((biz) => ({\n        //todo what data do we want back\n        name: biz.name,\n        id: biz.id,\n        image: biz.image_url,\n        rating: biz.rating,\n        street: biz.location.address1,\n        city: biz.city,\n        zip: biz.zip_code,\n        url: biz.url,\n      }));\n\n      setSearchedBiz(bizArray);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBiz = async (bizId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bizToSave = searchedBiz.find((biz) => biz.id === bizId);\n    console.log(bizToSave);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await addBusiness({\n        variables: {\n          name: bizToSave.name,\n          yelpId: bizToSave.id,\n          url: bizToSave.url,\n          location: bizToSave.street,\n          imgUrl: bizToSave.image,\n        },\n      });\n      // console.log(data);\n      // if biz successfully saves to user's account, save biz id to state\n      setSavedBizIds([...savedBizIds, bizToSave.bizId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-danger\">\n        <Container>\n          <h1>Search For Dog Friendly Businesses Nearby</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search by City, State or Zip\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBiz.length\n            ? `Viewing ${searchedBiz.length} results:`\n            : \"Search to begin\"}\n        </h2>\n\n        <CardColumns>\n          {searchedBiz.map((biz) => {\n            return (\n              <Card key={biz.id} border=\"dark\">\n                {biz.image ? (\n                  <Card.Img\n                    src={biz.image}\n                    alt={`The cover for ${biz.name}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{biz.name}</Card.Title>\n                  <p className=\"small\">Location: {}</p>\n                  <Card.Text>\n                    {biz.street}                    \n                  </Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBizIds?.some(\n                        (savedBizId) => savedBizId === biz.id\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBiz(biz.id)}\n                    >\n                      {savedBizIds?.some((savedBizId) => savedBizId === biz.id)\n                        ? \"This business has already been saved!\"\n                        : \"Save this Business!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBusinesses;\n\n// {Auth.loggedIn() && (\n//   <Button\n//     disabled={savedBizIds?.some((savedBizId) => savedBizId === biz.bizId)}\n//     className='btn-block btn-info'\n//     onClick={() => handleSaveBiz(biz.bizId)}>\n//     {savedBizIds?.some((savedBizId) => savedBizId === biz.bizId)\n\n//       : 'Save this Business!'}\n//   </Button>\n// )}\n\n//\n","export const getSavedBizIds = () => {\n  const savedBizIds = localStorage.getItem('saved_businesses')\n    ? JSON.parse(localStorage.getItem('saved_businesses'))\n    : [];\n\n  return savedBizIds;\n};\n\nexport const saveBizIds = (bizIdArray) => {\n  if (bizIdArray.length) {\n    localStorage.setItem('saved_businesses', JSON.stringify(bizIdArray));\n  } else {\n    localStorage.removeItem('saved_businesses');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }  \n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-12\">Login</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success! You may now head{' '}\n                <Link to=\"/\">back to the homepage.</Link>\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Sign Up</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success! You may now head{' '}\n                <Link to=\"/\">back to the homepage.</Link>\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your username\"\n                  name=\"username\"\n                  type=\"text\"\n                  value={formState.name}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\n// import { Navigate, useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BUSINESS } from '../utils/mutations'\nimport Auth from '../utils/auth';\nimport {\n  CardColumns,\n  Card,\n  Button,\n  Container\n} from 'react-bootstrap';\n\nconst imageStyle = {width: \"150px\", height: \"150px\"};\n\nconst Profile = () => {\n\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBusiness, { error }] = useMutation(REMOVE_BUSINESS);\n\n  const user = data?.me || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n\n  const handleDeleteBusiness = async (businessId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBusiness({\n        variables: { businessId },\n      });\n      window.location.reload(false);\n      return;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  };\nconsole.log(user.businesses)\n  return (\n    <div>\n      <Container>\n        <h2>\n          Viewing {user.username}'s profile.\n        </h2>\n\n        <div>\n          <h3>Favorite Businesses</h3>\n          <CardColumns>\n            {user.businesses.map((business) => (\n              <Card key={business._id} style={{ width: '20rem' }} >\n                {business.imgUrl ? (\n                  <Card.Img\n                    src={business.imgUrl}\n                    alt={`The cover for ${business.name}`}\n                    variant=\"top\"\n                    // style={imageStyle}\n                    \n                  />\n                ) : null}\n                <a href= {business.url} target=\"_blank\" rel=\"noreferrer\"><Card.Title>{business.name}</Card.Title></a>\n                <Card.Text>{business.location}</Card.Text>\n                <Button variant=\"primary\" onClick={() => handleDeleteBusiness(business._id)}>\n                  Remove from favorites\n                  </Button>\n              </Card>\n              \n            ))}\n          </CardColumns>\n          \n\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default Profile;\n","export default __webpack_public_path__ + \"static/media/paw2.6fc21eb8.png\";","import { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport '../Navbar.css';\nimport logo from '../paw2.png';\nimport Button from 'react-bootstrap/Button'\n\nconst AppNavbar = () => {\n\n  return (\n    <>\n      <Navbar bg='white' variant='light' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n          <img\n          src={logo}\n          width=\"50\"\n          height=\"50\"\n        />\n        <h3>PAW PATROLLER</h3>\n        <h7>Dog Friendly Business Search</h7>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/me'>\n                    {Auth.getProfile().data.username}'s profile\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                  <>\n                  <Nav.Link as={Link} to='/login'>\n                    Login\n                  </Nav.Link>\n                    <Nav.Link as={Link} to='/signup'>\n                      Sign Up\n                    </Nav.Link>\n                    </>\n              )}\n              \n            </Nav>\n          </Navbar.Collapse>\n          <div>\n          <Button variant=\"dark\" id='buttonInstall'>Dark</Button>{' '}\n          </div>\n        </Container>\n      </Navbar>\n      \n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport SearchYelp from './pages/SearchYelp';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport Login from './pages/Login'; \nimport Signup from './pages/Signup';\nimport Profile from './pages/Profile';\nimport NavBar from './components/Navbar'\nimport { setContext } from '@apollo/client/link/context';\nimport './App.css';\n\n\n\n\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <NavBar/>\n        <div className=\"Nav\">\n       \n\n        <Navbar.Brand>\n\n        </Navbar.Brand>\n\n\n        \n        <div className=\"App\">\n          <Routes>\n            <Route \n              path=\"/\" \n              element={<SearchYelp />}\n            />\n            <Route\n              path=\"/login\"\n              element={<Login />}\n            />\n            <Route\n              path=\"/signup\"\n              element={<Signup />}\n            />\n            <Route\n              path=\"/me\"\n              element={<Profile />}\n            />\n          </Routes>\n        </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}